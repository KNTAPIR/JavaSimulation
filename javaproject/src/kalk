import java.util.Scanner;  // Importujemy Scanner do wczytywania danych od u≈ºytkownika

class Kalkulator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);  // Tworzymy obiekt Scanner
        double[] liczby = new double[20];
        char[] dzialania = new char[20];
        int i = 0;
        boolean kk = false;
        for (i = 0; i<20 ;i=i+2) {
            // Wprowadzenie pierwszej liczby
            System.out.print("Podaj  liczbƒô: ");
            liczby[i] = scanner.nextDouble();


            // Wyb√≥r dzia≈Çania
            System.out.print("Wybierz dzia≈Çanie (+, -, *, /): ");
            dzialania[i] = scanner.next().charAt(0);

            System.out.print("Podaj  liczbƒô: ");
            liczby[i+1] = scanner.nextDouble();

            System.out.print("koniec? t/n");
            char odp = scanner.next().charAt(0);

            switch(odp){
                case 'n':
                    continue;

                case 't':
                    kk = true;
            }
            if(kk == true){
                break;
            }
        }
        // Wynik
        double wynik=0;
        double wynik_wlas=0;



        for(int j =0 ; j<=i; j++){
            // Obs≈Çuga dzia≈Ça≈Ñ
            switch (dzialania[j]) {
                case '+':
                    wynik = liczby[j] + liczby[j+1];
                    liczby[j] =wynik;
                    wynik_wlas = liczby[j];
                    break;
                case '-':
                    wynik = liczby[j] - liczby[j+1];
                    liczby[j] =wynik;
                    wynik_wlas = liczby[j];
                    break;
                case '*':
                    wynik = liczby[j] * liczby[j+1];
                    liczby[j] =wynik;
                    wynik_wlas = liczby[j];
                    break;
                case '/':
                    if (liczby[j+1] != 0) {
                        wynik = liczby[j] / liczby[j+1];
                        liczby[j] =wynik;
                        wynik_wlas = liczby[j];
                    } else {
                        System.out.println("‚ùå B≈ÇƒÖd: Nie mo≈ºna dzieliƒá przez zero!");
                        return;  // Zako≈Ñcz program, je≈õli dzielenie przez zero
                    }
                    break;
                default:
                    System.out.println("‚ùå B≈ÇƒÖd: Nieznany operator.");
                    return;  // Zako≈Ñcz program, je≈õli operator jest nieprawid≈Çowy
            }
        }
        // Wy≈õwietlenie wyniku
        System.out.println("Wynik: " + wynik_wlas);

        // Zamkniƒôcie Scannera
        scanner.close();
    }
}





// Klasa implementujƒÖca interfejs Runnable (lepsza praktyka ni≈º rozszerzanie Thread)
class Licznik implements Runnable {
    public void run() {
        for (int i = 1; i <= 10; i++) {
            System.out.println("Licznik: " + i);
            try {
                Thread.sleep(1000);  // Op√≥≈∫nienie 1 sekunda
            } catch (InterruptedException e) {
                System.out.println("WƒÖtek licznika zosta≈Ç przerwany.");
            }
        }
    }
}

// Drugi wƒÖtek
class Komunikat implements Runnable {
    public void run() {
        while (true) {
            System.out.println("üö® Przypomnienie: Pamiƒôtaj o przerwie!");
            try {
                Thread.sleep(3000);  // Komunikat co 3 sekundy
            } catch (InterruptedException e) {
                System.out.println("WƒÖtek komunikatu zosta≈Ç przerwany.");
                break;  // Zatrzymanie pƒôtli przy przerwaniu
            }
        }
    }
}

// Klasa g≈Ç√≥wna uruchamiajƒÖca oba wƒÖtki
class WielowatkowoscPrzyklad {
    public static void main(String[] args) {
        // Tworzenie obiekt√≥w wƒÖtk√≥w
        Thread watek1 = new Thread(new Licznik());
        Thread watek2 = new Thread(new Komunikat());

        // Uruchomienie wƒÖtk√≥w
        watek1.start();
        watek2.start();

        // Czekanie na zako≈Ñczenie wƒÖtku 1, potem przerwanie wƒÖtku 2
        try {
            watek1.join();  // Czeka na zako≈Ñczenie wƒÖtku 1
            watek2.interrupt();  // Przerywa wƒÖtek 2
        } catch (InterruptedException e) {
            System.out.println("G≈Ç√≥wny wƒÖtek zosta≈Ç przerwany.");
        }

        System.out.println("‚úÖ Program zako≈Ñczony.");
    }
}












import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

class KulkaPanel extends JPanel {
    private int x1 = 50, y1 = 50;   // Pozycja 1. kulki
    private int x2 = 200, y2 = 200; // Pozycja 2. kulki
    private int dx1 = 2, dy1 = 2;   // Kierunek ruchu 1. kulki
    private int dx2 = -3, dy2 = 3;  // Kierunek ruchu 2. kulki

   public KulkaPanel() {
        setPreferredSize(new Dimension(400, 400)); // Rozmiar okna

        // WƒÖtek dla 1. kulki
        new Thread(() -> {
            while (true) {
                x1 += dx1;
                y1 += dy1;
                if (x1 <= 0 || x1 >= getWidth() - 30) dx1 = -dx1;  // Odbicie od ≈õciany
                if (y1 <= 0 || y1 >= getHeight() - 30) dy1 = -dy1;
                repaint(); // Od≈õwie≈ºenie rysunku
                sleep(10);
            }
        }).start();

        // WƒÖtek dla 2. kulki
        new Thread(() -> {
            while (true) {
                x2 += dx2;
                y2 += dy2;
                if (x2 <= 0 || x2 >= getWidth() - 30) dx2 = -dx2;
                if (y2 <= 0 || y2 >= getHeight() - 30) dy2 = -dy2;
                repaint();
                sleep(15);
            }
        }).start();

    }

    // Metoda rysujƒÖca kulki
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.RED);   // Kolor 1. kulki
        g.fillOval(x1, y1, 30, 30);

        g.setColor(Color.BLUE);  // Kolor 2. kulki
        g.fillOval(x2, y2, 30, 30);
    }

    // Metoda pomocnicza do spowolnienia ruchu kulek
    private void sleep(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

class myMethod{

    public synchronized void myMethod(){

    }
}

// Klasa g≈Ç√≥wna uruchamiajƒÖca program
class KulkiWielowatkowe {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Kulki w ruchu");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(new KulkaPanel());  // Dodanie panelu z kulkami
        frame.pack();  // Dopasowanie rozmiaru
        frame.setLocationRelativeTo(null);  // Wycentrowanie okna
        frame.setVisible(true);  // Poka≈º okno

    }
}



import java.util.concurrent.locks.ReentrantLock;

class NumbersOperations {
    int a;
    int b;
    public static int add(int a,int b){
        return a+b;
    }
    public static int sub (int a, int b){
        return a-b;
    }
    public static double div (double a, int b){
        return a/b;
    }
}



public class Main {
    public static void main(String[] args) {
        int c = NumbersOperations.add(4,5);
        System.out.println(c);
        double d = NumbersOperations.div(1,2);
        System.out.println(d);
        int e = NumbersOperations.sub(6,9);
        System.out.println(e);

        ReentrantLock mylock = new ReentrantLock();

        mylock.unlock();
        mylock.tryLock();

    }
}









import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;

class ImageDisplay extends JFrame {

    public ImageDisplay() {
        // Ustawienia okna JFrame
        setTitle("Wy≈õwietlanie obrazu");
        setSize(1300, 1300);  // Ustawienie rozmiaru okna
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);  // Ustawienie okna na ≈õrodku ekranu

        // Wczytanie obrazu
        try {
            ImageIcon imageIcon = new ImageIcon("C:\\Users\\sebas\\IdeaProjects\\javaproject\\src\\torzysko.png"); // Podaj ≈õcie≈ºkƒô do swojego obrazu
            JLabel label = new JLabel(imageIcon);
            add(label, BorderLayout.CENTER);  // Dodanie etykiety z obrazem do okna
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Tworzenie obiektu okna
        SwingUtilities.invokeLater(() -> {
            new ImageDisplay().setVisible(true);
        });



    }










    import javax.swing.*;
    import java.awt.*;
    import java.awt.image.BufferedImage;
    import javax.imageio.ImageIO;
    import java.io.File;
    import java.io.IOException;

    class CustomBackground extends JFrame {

        // Klasa do rysowania t≈Ça i prostokƒÖt√≥w
        class DrawingPanel extends JPanel {
            private BufferedImage backgroundImage;

            public DrawingPanel() {
                try {
                    // Wczytanie t≈Ça z pliku PNG
                    backgroundImage = ImageIO.read(new File("C:\\Users\\sebas\\IdeaProjects\\javaproject\\src\\torzysko.png"));
                } catch (IOException e) {
                    System.out.println("B≈ÇƒÖd wczytywania obrazu: " + e.getMessage());
                }
            }

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                // Rysowanie t≈Ça
                if (backgroundImage != null) {
                    g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
                }

                // Rysowanie prostokƒÖt√≥w
                g.setColor(Color.RED);
                g.fillRect(1125, 290, 10, 5);

                g.setColor(Color.BLUE);
                g.fillRect(1125, 300, 10, 5);
            }
        }

        public CustomBackground() {
            setTitle("T≈Ço + ProstokƒÖty");
            setSize(1300, 650);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setLocationRelativeTo(null);

            // Dodanie panelu z grafikƒÖ
            add(new DrawingPanel());

            setVisible(true);
        }

        public static void main(String[] args) {
            new CustomBackground();
        }
    }