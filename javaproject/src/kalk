import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

class DonutAnimation extends JPanel {
    Random rand = new Random();
    private final int WIDTH = 800;
    private final int HEIGHT = 800;
    private final int RADIUS_OUTER = 300;
    private final int RADIUS_INNER = 250;
    private final int RECT_SIZE = 10;

    private double angle1 = Math.PI;
    private double angle2 = Math.PI;

    private int laps1 = 0;
    private int laps2 = 0;
    private long lastTime1 = System.currentTimeMillis();
    private long lastTime2 = System.currentTimeMillis();

    private final Map<Integer, Long> lapTimes1 = new HashMap<>();
    private final Map<Integer, Long> lapTimes2 = new HashMap<>();

    public DonutAnimation() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.BLACK);

        new Thread(() -> {
            while (true) {
                double delta1 = rand.nextDouble() / 20;
                angle1 += delta1;
                if (angle1 >= Math.PI ) {
                    angle1 -= Math.PI * 2;
                    laps1++;
                    long currentTime = System.currentTimeMillis();
                    lapTimes1.put(laps1, currentTime - lastTime1);
                    lastTime1 = currentTime;
                }
                repaint();
                try { Thread.sleep(20); } catch (InterruptedException ex) { ex.printStackTrace(); }
            }
        }).start();

        new Thread(() -> {
            while (true) {
                double delta2 = rand.nextDouble() / 20;
                angle2 += delta2;
                if (angle2 >= Math.PI ) {
                    angle2 -= Math.PI * 2;
                    laps2++;
                    long currentTime = System.currentTimeMillis();
                    lapTimes2.put(laps2, currentTime - lastTime2);
                    lastTime2 = currentTime;
                }
                repaint();
                try { Thread.sleep(20); } catch (InterruptedException ex) { ex.printStackTrace(); }
            }
        }).start();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        int centerX = WIDTH / 2;
        int centerY = HEIGHT / 2;

        g2d.setColor(Color.DARK_GRAY);
        g2d.fillOval(centerX - RADIUS_OUTER, centerY - RADIUS_OUTER, 2 * RADIUS_OUTER, 2 * RADIUS_OUTER);

        g2d.setColor(Color.BLACK);
        g2d.fillOval(centerX - RADIUS_INNER, centerY - RADIUS_INNER, 2 * RADIUS_INNER, 2 * RADIUS_INNER);

        g2d.setColor(Color.WHITE);
        int finishX = (int) (centerX + Math.cos(Math.PI) * ((RADIUS_OUTER + RADIUS_INNER) / 2));
        int finishY = (int) (centerY + Math.sin(Math.PI) * ((RADIUS_OUTER + RADIUS_INNER) / 2));
        g2d.drawLine(finishX - 10, finishY - 10, finishX + 10, finishY + 10);
        g2d.drawLine(finishX + 10, finishY - 10, finishX - 10, finishY + 10);

        g2d.setColor(Color.WHITE);
        g2d.drawLine(finishX - 20, finishY, finishX + 20, finishY);

        int rectX1 = (int) (centerX + Math.cos(angle1) * ((RADIUS_OUTER + RADIUS_INNER) / 2) + 7 - RECT_SIZE / 2);
        int rectY1 = (int) (centerY + Math.sin(angle1) * ((RADIUS_OUTER + RADIUS_INNER) / 2) - RECT_SIZE / 2);
        g2d.setColor(Color.RED);
        g2d.fillRect(rectX1, rectY1, RECT_SIZE, RECT_SIZE);

        int rectX2 = (int) (centerX + Math.cos(angle2) * ((RADIUS_OUTER + RADIUS_INNER) / 2) - 7 - RECT_SIZE / 2);
        int rectY2 = (int) (centerY + Math.sin(angle2) * ((RADIUS_OUTER + RADIUS_INNER) / 2) - RECT_SIZE / 2);
        g2d.setColor(Color.BLUE);
        g2d.fillRect(rectX2, rectY2, RECT_SIZE, RECT_SIZE);

        g2d.setColor(Color.WHITE);
        g2d.drawString("Red laps: " + laps1, 20, 20);
        g2d.drawString("Blue laps: " + laps2, 20, 40);

        int textY = 60;
        for (Map.Entry<Integer, Long> entry : lapTimes1.entrySet()) {
            g2d.drawString("Red Lap " + entry.getKey() + ": " + entry.getValue() + " ms", 20, textY);
            textY += 20;
        }

        textY = 60;
        for (Map.Entry<Integer, Long> entry : lapTimes2.entrySet()) {
            g2d.drawString("Blue Lap " + entry.getKey() + ": " + entry.getValue() + " ms", 150, textY);
            textY += 20;
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Donut Animation");
        DonutAnimation animation = new DonutAnimation();
        frame.add(animation);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}

